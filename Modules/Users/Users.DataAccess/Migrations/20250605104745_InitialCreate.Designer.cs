// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Users.Domain;

#nullable disable

namespace Users.Domain.Migrations
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20250605104745_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Users.Domain.Entities.PermissionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ReadAddress"
                        },
                        new
                        {
                            Id = 2,
                            Name = "CreateAddress"
                        },
                        new
                        {
                            Id = 3,
                            Name = "UpdateAddress"
                        },
                        new
                        {
                            Id = 4,
                            Name = "DeleteAddress"
                        },
                        new
                        {
                            Id = 5,
                            Name = "ReadDepartment"
                        },
                        new
                        {
                            Id = 6,
                            Name = "CreateDepartment"
                        },
                        new
                        {
                            Id = 7,
                            Name = "UpdateDepartment"
                        },
                        new
                        {
                            Id = 8,
                            Name = "DeleteDepartment"
                        },
                        new
                        {
                            Id = 9,
                            Name = "ReadEmployee"
                        },
                        new
                        {
                            Id = 10,
                            Name = "CreateEmployee"
                        },
                        new
                        {
                            Id = 11,
                            Name = "UpdateEmployee"
                        },
                        new
                        {
                            Id = 12,
                            Name = "DeleteEmployee"
                        },
                        new
                        {
                            Id = 13,
                            Name = "UpdateUser"
                        },
                        new
                        {
                            Id = 14,
                            Name = "DeleteUser"
                        },
                        new
                        {
                            Id = 15,
                            Name = "ReadReception"
                        },
                        new
                        {
                            Id = 16,
                            Name = "CreateReception"
                        },
                        new
                        {
                            Id = 17,
                            Name = "UpdateReception"
                        },
                        new
                        {
                            Id = 18,
                            Name = "DeleteReception"
                        },
                        new
                        {
                            Id = 19,
                            Name = "ReadResult"
                        },
                        new
                        {
                            Id = 20,
                            Name = "CreateResult"
                        },
                        new
                        {
                            Id = 21,
                            Name = "UpdateResult"
                        },
                        new
                        {
                            Id = 22,
                            Name = "DeleteResult"
                        });
                });

            modelBuilder.Entity("Users.Domain.Entities.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Users.Domain.Entities.RolePermissionEntity", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("PermissionId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("Users.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Users.Domain.Entities.UserProfileEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FatherName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("UserId");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Users.Domain.Entities.UserRoleEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("AssignedByUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Users.Domain.Entities.RolePermissionEntity", b =>
                {
                    b.HasOne("Users.Domain.Entities.PermissionEntity", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Users.Domain.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Users.Domain.Entities.UserEntity", b =>
                {
                    b.OwnsOne("Users.Core.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(60)
                                .HasColumnType("character varying(60)")
                                .HasColumnName("Email");

                            b1.HasKey("UserEntityId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserEntityId");
                        });

                    b.OwnsOne("Users.Core.ValueObjects.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("UserEntityId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("IsActual")
                                .HasColumnType("boolean")
                                .HasColumnName("PhoneNumberIsActual");

                            b1.Property<bool>("IsComfirmed")
                                .HasColumnType("boolean")
                                .HasColumnName("PhoneNumberIsComfirmed");

                            b1.Property<bool>("IsValid")
                                .HasColumnType("boolean")
                                .HasColumnName("PhoneNumberIsValid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("UserEntityId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserEntityId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("PhoneNumber")
                        .IsRequired();
                });

            modelBuilder.Entity("Users.Domain.Entities.UserProfileEntity", b =>
                {
                    b.HasOne("Users.Domain.Entities.UserEntity", "User")
                        .WithOne("Profile")
                        .HasForeignKey("Users.Domain.Entities.UserProfileEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Users.Domain.Entities.UserRoleEntity", b =>
                {
                    b.HasOne("Users.Domain.Entities.RoleEntity", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Users.Domain.Entities.UserEntity", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Users.Domain.Entities.RoleEntity", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Users.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
